name: Test GHA workflow

on:
  pull_request:
    branches:
      - 'main'
  push:
    branches:
      - main

jobs:
  triage:
    permissions: write-all
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      RES: ${{ steps.set_output.outputs.RES }}
      GROUP_NUMBER: ${{ steps.sys_tests.outputs.GROUP_NUMBER }}
    steps:
      - uses: actions/labeler@v5
      - uses: Brightspace/third-party-actions@actions/checkout
        # For correct work of `Get PULL_REQUEST_NUMBER (push)`-step
        with:
          fetch-depth: 0

      - name: Get PULL_REQUEST_NUMBER (push)
        if: ${{ github.event_name == 'push' }}
        # get PR number from the latest commit
        run: |
          pr_number="$(git log -1 | grep -oP 'Merge pull request #\K\d+' || echo "")"
          echo "PULL_REQUEST_NUMBER=$pr_number"
          echo "PULL_REQUEST_NUMBER=$pr_number" >> $GITHUB_ENV

      - name: Get PULL_REQUEST_NUMBER (pull_request)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "PULL_REQUEST_NUMBER=$PR_NUMBER"
          echo "PULL_REQUEST_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
      
      - name: Print PULL_REQUEST_NUMBER
        run: |
          echo "PR NUMBER: $PULL_REQUEST_NUMBER"

      - name: Set DEFAULT environment variables
        run: |
          condition_result=0;
          echo "RES=$condition_result"
          echo "RES=$condition_result" >> $GITHUB_ENV
          echo "RES=$condition_result" >> $GITHUB_OUTPUT

      - name: Label PR
        run: |
          if [ -z $PULL_REQUEST_NUMBER ]
          then
            echo There are no PRs available!
            exit 0;
          fi

          echo Warning! Ensure that .github/sub-project.regex contains LFs not CRLFs

          sub_project="$(gh pr diff $PULL_REQUEST_NUMBER --name-only | grep --quiet -E -i -f .github/sub-project.regex && echo $? || echo $?)"
          if [ $sub_project == 0 ]
          then
            echo Found changes in files that match patterns in .github/sub-project.regexp
            gh pr edit $PULL_REQUEST_NUMBER --add-label sub-project
          fi

          non_sub_project="$(gh pr diff $PULL_REQUEST_NUMBER --name-only | grep --quiet -E -i -v -f .github/sub-project.regex && echo $? || echo $?)"
          if [ $non_sub_project == 0 ]
          then
            echo Found changes in files that DO NOT MATCH patterns in .github/sub-project.regexp
            gh pr diff $PULL_REQUEST_NUMBER --name-only | grep -E -i -v -f .github/sub-project.regex | head
            gh pr edit $PULL_REQUEST_NUMBER --add-label except-sub-project
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Set environment variables
        id: set_output
        run: |
          if [ -z $PULL_REQUEST_NUMBER ]
          then
            # TODO: remove the next line. for test purpose only
            echo "RES=1" >> $GITHUB_OUTPUT
            echo There are no PRs available! Using the default values of environment variables
            exit 0;
          fi
          fact1_label="$(gh api repos/$REPO/pulls/$PULL_REQUEST_NUMBER --jq 'if any(.labels.[]; .name=="sub-project") then 1 else 0 end')"
          fact2_label="$(gh api repos/$REPO/pulls/$PULL_REQUEST_NUMBER --jq 'if any(.labels.[]; .name=="except-sub-project") then 1 else 0 end')"
          condition_result=0
          if [ $fact1_label == 1 ] && [ $fact2_label == 0 ]
          then
            condition_result=1
          fi
          echo "RES=$condition_result"
          echo "RES=$condition_result" >> $GITHUB_ENV
          echo "RES=$condition_result" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}

      - name: Get SYSTEM_TESTS
        id: sys_tests
        run: |
          echo Current GITHUB_RUN_NUMBER=$GITHUB_RUN_NUMBER
          echo Current SYSTEM_TESTS=$SYSTEM_TESTS
          #
          # get Max value in $SYSTEM_TESTS that is less then the current $GITHUB_RUN_NUMBER. Defaults to 999999, if $SYSTEM_TESTS does not contains any 
          #
          GROUP_NUMBER=$(echo $SYSTEM_TESTS | jq 'map(. | tonumber) | map(select(. < env.GITHUB_RUN_NUMBER)) | max // 999999')
          echo GROUP_NUMBER=$GROUP_NUMBER
          echo GROUP_NUMBER=$GROUP_NUMBER >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.VARIABLE_MANAGE_TOKEN }}
          SYSTEM_TESTS: ${{ vars.SYSTEM_TESTS }}

      - name: Add current RUN_NUMBER to SYSTEM_TESTS
        if: ${{ env.RES != '1' }}
        run: |
          running_workflows=$(gh variable get SYSTEM_TESTS --json value --jq '.value | fromjson | . + [env.GITHUB_RUN_NUMBER] | tojson')
          echo "Running workflows $running_workflows"
          gh variable set SYSTEM_TESTS -b "$running_workflows"
        env:
          GH_TOKEN: ${{ secrets.VARIABLE_MANAGE_TOKEN }}

  actual_job:
    if: ${{ needs.triage.outputs.RES != '1' }}
    needs: [ triage ]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    concurrency:
      group: ${{ 'job-concurrency-group' }}-${{ github.run_number }}
      cancel-in-progress: false
    env:
      RES: ${{ needs.triage.outputs.RES }}
    steps: 
      - uses: Brightspace/third-party-actions@actions/checkout
      - uses: Brightspace/third-party-actions@actions/setup-node
      - name: Greeting
        run: |
          echo Hello from Actual Job $ref
          echo "RES=$RES"
        env:
          ref: ${{ github.ref }}
      # - name: delay 01
      #   run: |
      #       node ./delay.js
      # - name: delay 02
      #   run: |
      #     node ./delay.js
      # - name: delay 03
      #   run: |
      #     node ./delay.js
      # - name: delay 04
      #   run: |
      #     node ./delay.js
      - name: Remove current run from SYSTEM_TESTS
        run: |
          # vars.SYSTEM_TESTS variable doesn't contain recent changes via API. So, we don't use it
          #
          running_workflows=$(gh variable get SYSTEM_TESTS --json value --jq '.value | fromjson | map(. | tonumber) | map(select(. > env.GITHUB_RUN_NUMBER)) | tojson')
          echo "Running workflows in the CI queue $running_workflows"
          gh variable set SYSTEM_TESTS -b "$running_workflows"
        env:
          GH_TOKEN: ${{ secrets.VARIABLE_MANAGE_TOKEN }}

  waiting_job:
    if: ${{ needs.triage.outputs.RES == '1' }}
    needs: [ triage ]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    concurrency:
      group: ${{ 'job-concurrency-group' }}-${{ needs.triage.outputs.GROUP_NUMBER }}
      cancel-in-progress: false
    env:
      RES: ${{ needs.triage.outputs.RES }}
    steps: 
      - name: Greeting
        run: |
          echo Hello from Waiting Job $ref
          echo "RES=$RES"
        env:
          ref: ${{ github.ref }}
      - uses: Brightspace/third-party-actions@actions/checkout
      - uses: Brightspace/third-party-actions@actions/setup-node
      - name: delay 01
        run: |
            node ./delay.js

  job_after:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [actual_job, waiting_job]
    steps:
      - name: Greeting 
        run: |
          echo "Hello from Actual Job. $ref"
        env:
          ref: ${{ github.ref }}
      - uses: Brightspace/third-party-actions@actions/checkout
      - uses: Brightspace/third-party-actions@actions/setup-node
        with:
          node-version-file: .nvmrc
      - name: delay 01
        run: |
          node ./delay.js


